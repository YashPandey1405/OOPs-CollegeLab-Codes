// Complete Concept Of Object Of Class & Pointer To Objects Of Classes.....
#include<iostream>
using namespace std;

class Alpha{
    private:
        int Num1;
    public:
        Alpha(){}   // Default Contructor Of Class Alpha..........
        Alpha(int Num1){
            cout<<"CONSTRUCTOR OF CLASS ALPHA IS BEEN CALLED......."<<endl;
            this->Num1=Num1;
        }
        void Display(void){   //Virtual Function
            cout<<"VALUE OF DATA MEMBER OF CLASS ALPHA IS ::: "<<Num1<<endl;
        }     
        // virtual void Display(void)=0; --> Pure Virtual Function SYNTAX.......
};

class Betta : virtual public Alpha{
    private:
        int Num2;
    public:
        Betta(){}   // Default Contructor Of Class Betta..........
        Betta(int Num2) : Alpha(10*Num2){  // Use Of Initialization List......
            cout<<"CONSTRUCTOR OF CLASS BETTA IS BEEN CALLED......."<<endl;
            this->Num2=Num2;
        }
        void Display(void){   
            cout<<"VALUE OF DATA MEMBER OF CLASS BETTA IS ::: "<<Num2<<endl;
        }  
};

class Gamma : virtual public Alpha{
    private:
        int Num3;
    public:
        Gamma(){}   // Default Contructor Of Class Gamma..........
        Gamma(int Num3) : Alpha(20*Num3) {   // Use Of Initialization List......
            cout<<"CONSTRUCTOR OF CLASS GAMMA IS BEEN CALLED......."<<endl;
            this->Num3=Num3;
        }
        void Display(void){
            cout<<"VALUE OF DATA MEMBER OF CLASS GAMMA IS ::: "<<Num3<<endl;
        }
};

class Delta : public Betta , public Gamma{
    private:
        int Num4;
    public:
        Delta(){}   // Default Contructor Of Class Delta..........
        Delta(int Num4) : Alpha(30*Num4) , Betta(20*Num4) , Gamma(10*Num4){
            cout<<"CONSTRUCTOR OF CLASS DELTA IS BEEN CALLED......."<<endl;
            this->Num4=Num4;
        }
        void Display(void){
            cout<<"VALUE OF DATA MEMBER OF CLASS DELTA IS ::: "<<Num4<<endl;
        }
};

int main(){

    // Case 1 --> Creating Object Of Class Alpha.........
        // Alpha a(10);
        // a.Display();
        // a.Betta::Display();  --> This Will Cause Error.......
        // a.Gamma::Display();  --> This Will Cause Error.......
        // a.Delta::Display();  --> This Will Cause Error.......


    // Case 2 --> Creating Object Of Class Betta.........
        // Betta b(10);
        // b.Display();  // Same As --> b.Betta::Display();
        // b.Alpha::Display();


    // Case 3 --> Creating Object Of Class Gamma.........
        // Gamma g(10);
        // g.Display();  // Same As --> g.Gamma::Display();
        // g.Alpha::Display();


    // Case 4 --> Creating Object Of Class Delta.........
        // Delta d(10);
        // d.Display();
        // d.Alpha::Display();  // Same As --> d.Delta::Display();
        // d.Betta::Display();
        // d.Gamma::Display();


    // Case 5 --> Creating Pointer Of Class Alpha.....

        // (I) --> Pointing To Object Of Class Alpha.........
        // Alpha* ptr_Alpha=new Alpha(10);  // This Will Create & Point Object Of Alpha To ptr_Alpha.....
        // ptr_Alpha->Display();
        // ptr_Alpha->Betta::Display();  --> This Will Cause Error.......
        // ptr_Alpha->Gamma::Display();  --> This Will Cause Error.......
        // ptr_Alpha->Delta::Display();  --> This Will Cause Error.......

        // (II) --> Pointing To Object Of Class Betta.........
        // Alpha* ptr_Alpha=new Betta(10);  // This Will Create & Point Object Of Betta To ptr_Alpha.....
        // ptr_Alpha->Display();  // Same As --> ptr_Alpha->Alpha::Display();  
        // ptr_Alpha->Betta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Gamma::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Delta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
    
        // (III) --> Pointing To Object Of Class Gamma.........
        // Alpha* ptr_Alpha=new Gamma(10);  // This Will Create & Point Object Of Gamma To ptr_Alpha.....
        // ptr_Alpha->Display();  // Same As --> ptr_Alpha->Alpha::Display();  
        // ptr_Alpha->Betta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Gamma::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Delta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
    
        // (IV) --> Pointing To Object Of Class Delta.........
        // Alpha* ptr_Alpha=new Delta(10);  // This Will Create & Point Object Of Delta To ptr_Alpha.....
        // ptr_Alpha->Display();  // Same As --> ptr_Alpha->Alpha::Display();  
        // ptr_Alpha->Betta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Gamma::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
        // ptr_Alpha->Delta::Display();  --> Error : can't call Function Of Derived Class using Base class Pointer.....
    

    // Case 6 --> Creating Pointer Of Class Betta.....
        
        // (I) --> Pointing To Object Of Class Alpha.........
        // we cannot point a pointer of derived class to an object of base class....
        // Betta* ptr_Betta = new Alpha(10); --> Not Possible........

        // (II) --> Pointing To Object Of Class Betta.........
        // Betta* ptr_Betta = new Betta(10); 
        // ptr_Betta->Display();    // Same As --> ptr_Betta->Betta::Display();
        // ptr_Betta->Alpha::Display();  // This Will Call Display() Of Class Alpha......
        // ptr_Betta->Gamma::Display();  --> This Will Cause Error.......
        // ptr_Betta->Delta::Display();  --> This Will Cause Error.......

        // (III) --> Pointing To Object Of Class Gamma.........
        // There Is No Direct Inheritance B/w Class Betta & Class Gamma Which Disallow This Linkage.....
        // We Can Link Pointer Of Class Betta With Object Of Class Gamma......
        // Betta* ptr_Betta = new Gamma(10);  --> Not Possible.......
    
        // (IV) --> Pointing To Object Of Class Delta.........
        // Betta* ptr_Betta = new Delta(10);
        // ptr_Betta->Display();    // Same As -> ptr_Betta->Betta::Display();
        // ptr_Betta->Alpha::Display();  // This Will Call Display() Of Class Alpha......
        // ptr_Betta->Gamma::Display();  --> This Will Cause Error.......
        // ptr_Betta->Delta::Display();  --> This Will Cause Error.......
    
    
    // Case 7 --> Creating Pointer Of Class Gamma.....

        // (I) --> Pointing To Object Of Class Alpha.........
        // we cannot point a pointer of derived class to an object of base class....
        // Gamma* ptr_Gamma = new Alpha(10); --> Not Possible........

        // (II) --> Pointing To Object Of Class Betta.........
        // There Is No Direct Inheritance B/w Class Betta & Class Gamma Which Disallow This Linkage.....
        // We Can Link Pointer Of Class Gamma With Object Of Class Betta......
        // Gamma* ptr_Gamma = new Betta(10);  --> Not Possible.......

        // (III) --> Pointing To Object Of Class Gamma.........
        // Gamma* ptr_Gamma = new Gamma(10); 
        // ptr_Gamma->Display();    // Same As --> ptr_Gamma->Gamma::Display();
        // ptr_Gamma->Alpha::Display();  // This Will Call Display() Of Class Alpha......
        // ptr_Gamma->Betta::Display();  --> This Will Cause Error.......
        // ptr_Gamma->Delta::Display();  --> This Will Cause Error.......

        // (IV) --> Pointing To Object Of Class Delta.........
        // Gamma* ptr_Gamma = new Delta(10);
        // ptr_Gamma->Display();    // Same As -> ptr_Gamma->Gamma::Display();
        // ptr_Gamma->Alpha::Display();  // This Will Call Display() Of Class Alpha......
        // ptr_Gamma->Betta::Display();  --> This Will Cause Error.......
        // ptr_Gamma->Delta::Display();  --> This Will Cause Error.......
    
    
    // Case 8 --> Creating Pointer Of Class Delta.....

        // (I) --> Pointing To Object Of Class Alpha.........
        // Delta* ptr_Delta = new Alpha(10); --> Not Possible........

        // (II) --> Pointing To Object Of Class Betta.........
        // we cannot point a pointer of derived class to an object of base class....
        // Delta* ptr_Delta = new Betta(10);  --> Not Possible........

        // (III) --> Pointing To Object Of Class Gamma.........
        // we cannot point a pointer of derived class to an object of base class....
        // Delta* ptr_Delta = new Gamma(10);  --> Not Possible........

        // (IV) --> Pointing To Object Of Class Delta.........
        // Delta* ptr_Delta = new Delta(10);
        // ptr_Delta->Display();    // Same As -> ptr_Delta->Delta::Display();
        // ptr_Delta->Alpha::Display();  --> This Will Call Display() Of Class Alpha......
        // ptr_Delta->Betta::Display();  --> This Will Call Display() Of Class Betta......
        // ptr_Delta->Gamma::Display();  --> This Will Call Display() Of Class Gamma......

    return 0;
}